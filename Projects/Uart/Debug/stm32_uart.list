
stm32_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001390  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001558  08001558  00011558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001568  08001568  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001568  08001568  00011568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001570  08001570  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001570  08001570  00011570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001574  08001574  00011574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001584  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001584  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003750  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c4d  00000000  00000000  0002378c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003a8  00000000  00000000  000243e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000330  00000000  00000000  00024788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002335d  00000000  00000000  00024ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004015  00000000  00000000  00047e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc3e2  00000000  00000000  0004be2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012820c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d14  00000000  00000000  0012825c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08001540 	.word	0x08001540

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08001540 	.word	0x08001540

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000512:	f000 f919 	bl	8000748 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 f9d2 	bl	80008be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f8b9 	bl	8000690 <SystemClock_Config>

  RCC->CR |= RCC_CR_HSEON;
 800051e:	4b58      	ldr	r3, [pc, #352]	; (8000680 <main+0x174>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a57      	ldr	r2, [pc, #348]	; (8000680 <main+0x174>)
 8000524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000528:	6013      	str	r3, [r2, #0]

  while ((RCC->CR & RCC_CR_HSERDY) != RCC_CR_HSERDY);
 800052a:	bf00      	nop
 800052c:	4b54      	ldr	r3, [pc, #336]	; (8000680 <main+0x174>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000538:	d1f8      	bne.n	800052c <main+0x20>

  RCC->CFGR |= RCC_CFGR_SW_HSE;
 800053a:	4b51      	ldr	r3, [pc, #324]	; (8000680 <main+0x174>)
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	4a50      	ldr	r2, [pc, #320]	; (8000680 <main+0x174>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6093      	str	r3, [r2, #8]

  while ((RCC->CFGR & RCC_CFGR_SWS_HSE) == 0);
 8000546:	bf00      	nop
 8000548:	4b4d      	ldr	r3, [pc, #308]	; (8000680 <main+0x174>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	f003 0304 	and.w	r3, r3, #4
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f9      	beq.n	8000548 <main+0x3c>

  uint32_t sws = 0, hpre = 0, ppre2 = 0, ppre1 = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]

  sws = (RCC->CFGR & RCC_CFGR_SWS) >> RCC_CFGR_SWS_Pos;
 8000564:	4b46      	ldr	r3, [pc, #280]	; (8000680 <main+0x174>)
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	089b      	lsrs	r3, r3, #2
 800056a:	f003 0303 	and.w	r3, r3, #3
 800056e:	613b      	str	r3, [r7, #16]
  hpre = (RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos;
 8000570:	4b43      	ldr	r3, [pc, #268]	; (8000680 <main+0x174>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	091b      	lsrs	r3, r3, #4
 8000576:	f003 030f 	and.w	r3, r3, #15
 800057a:	60fb      	str	r3, [r7, #12]
  ppre2 = (RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos;
 800057c:	4b40      	ldr	r3, [pc, #256]	; (8000680 <main+0x174>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	0b5b      	lsrs	r3, r3, #13
 8000582:	f003 0307 	and.w	r3, r3, #7
 8000586:	60bb      	str	r3, [r7, #8]
  ppre1 = (RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos;
 8000588:	4b3d      	ldr	r3, [pc, #244]	; (8000680 <main+0x174>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	0a9b      	lsrs	r3, r3, #10
 800058e:	f003 0307 	and.w	r3, r3, #7
 8000592:	607b      	str	r3, [r7, #4]


  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN;
 8000594:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <main+0x174>)
 8000596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000598:	4a39      	ldr	r2, [pc, #228]	; (8000680 <main+0x174>)
 800059a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059e:	6313      	str	r3, [r2, #48]	; 0x30


  // PI1 GP output mode
  GPIOI->MODER |= (0b01 << 2); // GPIO_MODER_MODER1_0
 80005a0:	4b38      	ldr	r3, [pc, #224]	; (8000684 <main+0x178>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a37      	ldr	r2, [pc, #220]	; (8000684 <main+0x178>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6013      	str	r3, [r2, #0]

  // Button (PI11) is set as input by default after reset

  // Read Button PI11 - wait for button push
  while ((GPIOI->IDR & GPIO_IDR_ID11) != GPIO_IDR_ID11);
 80005ac:	bf00      	nop
 80005ae:	4b35      	ldr	r3, [pc, #212]	; (8000684 <main+0x178>)
 80005b0:	691b      	ldr	r3, [r3, #16]
 80005b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005ba:	d1f8      	bne.n	80005ae <main+0xa2>

  // set LED PI1
  GPIOI->BSRR |= GPIO_BSRR_BS1;
 80005bc:	4b31      	ldr	r3, [pc, #196]	; (8000684 <main+0x178>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a30      	ldr	r2, [pc, #192]	; (8000684 <main+0x178>)
 80005c2:	f043 0302 	orr.w	r3, r3, #2
 80005c6:	6193      	str	r3, [r2, #24]


  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80005c8:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <main+0x174>)
 80005ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005cc:	4a2c      	ldr	r2, [pc, #176]	; (8000680 <main+0x174>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80005d4:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <main+0x174>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d8:	4a29      	ldr	r2, [pc, #164]	; (8000680 <main+0x174>)
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	6313      	str	r3, [r2, #48]	; 0x30

  GPIOC->MODER |= (0b10 << 6*2); // PC6
 80005e0:	4b29      	ldr	r3, [pc, #164]	; (8000688 <main+0x17c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a28      	ldr	r2, [pc, #160]	; (8000688 <main+0x17c>)
 80005e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ea:	6013      	str	r3, [r2, #0]
  GPIOC->MODER |= (0b10 << 7*2); // PC7
 80005ec:	4b26      	ldr	r3, [pc, #152]	; (8000688 <main+0x17c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a25      	ldr	r2, [pc, #148]	; (8000688 <main+0x17c>)
 80005f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005f6:	6013      	str	r3, [r2, #0]

  // 24 << PC6, AF8 = 0b1000
  GPIOC->AFR[0] |= (0b1000 << (4 * (6-0))); // Serial 6 TX
 80005f8:	4b23      	ldr	r3, [pc, #140]	; (8000688 <main+0x17c>)
 80005fa:	6a1b      	ldr	r3, [r3, #32]
 80005fc:	4a22      	ldr	r2, [pc, #136]	; (8000688 <main+0x17c>)
 80005fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000602:	6213      	str	r3, [r2, #32]
  // 28 << PC7, AF8 = 0b1000
  GPIOC->AFR[0] |= (0b1000 << (4 * (7-0))); // Serial 6 RX
 8000604:	4b20      	ldr	r3, [pc, #128]	; (8000688 <main+0x17c>)
 8000606:	6a1b      	ldr	r3, [r3, #32]
 8000608:	4a1f      	ldr	r2, [pc, #124]	; (8000688 <main+0x17c>)
 800060a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800060e:	6213      	str	r3, [r2, #32]

  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <main+0x174>)
 8000612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000614:	4a1a      	ldr	r2, [pc, #104]	; (8000680 <main+0x174>)
 8000616:	f043 0320 	orr.w	r3, r3, #32
 800061a:	6453      	str	r3, [r2, #68]	; 0x44

  USART6->BRR = 1667;
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <main+0x180>)
 800061e:	f240 6283 	movw	r2, #1667	; 0x683
 8000622:	60da      	str	r2, [r3, #12]

  USART6->CR1 |= USART_CR1_UE;
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <main+0x180>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a18      	ldr	r2, [pc, #96]	; (800068c <main+0x180>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6013      	str	r3, [r2, #0]

  USART6->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <main+0x180>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a15      	ldr	r2, [pc, #84]	; (800068c <main+0x180>)
 8000636:	f043 030c 	orr.w	r3, r3, #12
 800063a:	6013      	str	r3, [r2, #0]

  uint8_t i = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	75fb      	strb	r3, [r7, #23]
  uint8_t data = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	70fb      	strb	r3, [r7, #3]

  while(1)
  {
	  if (i > 9) i = 0;
 8000644:	7dfb      	ldrb	r3, [r7, #23]
 8000646:	2b09      	cmp	r3, #9
 8000648:	d901      	bls.n	800064e <main+0x142>
 800064a:	2300      	movs	r3, #0
 800064c:	75fb      	strb	r3, [r7, #23]

	  USART6->TDR = i;
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <main+0x180>)
 8000650:	7dfb      	ldrb	r3, [r7, #23]
 8000652:	6293      	str	r3, [r2, #40]	; 0x28
	  while (!(USART6->ISR & USART_ISR_TXE));
 8000654:	bf00      	nop
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <main+0x180>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	2b00      	cmp	r3, #0
 8000660:	d0f9      	beq.n	8000656 <main+0x14a>

	  while (!(USART6->ISR & USART_ISR_RXNE));
 8000662:	bf00      	nop
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <main+0x180>)
 8000666:	69db      	ldr	r3, [r3, #28]
 8000668:	f003 0320 	and.w	r3, r3, #32
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f9      	beq.n	8000664 <main+0x158>
	  data = USART6->RDR;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <main+0x180>)
 8000672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000674:	70fb      	strb	r3, [r7, #3]

	  i++;
 8000676:	7dfb      	ldrb	r3, [r7, #23]
 8000678:	3301      	adds	r3, #1
 800067a:	75fb      	strb	r3, [r7, #23]
	  if (i > 9) i = 0;
 800067c:	e7e2      	b.n	8000644 <main+0x138>
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40022000 	.word	0x40022000
 8000688:	40020800 	.word	0x40020800
 800068c:	40011400 	.word	0x40011400

08000690 <SystemClock_Config>:
  * @retval None
  */


void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	; 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 ff46 	bl	8001530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <SystemClock_Config+0xb0>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <SystemClock_Config+0xb0>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <SystemClock_Config+0xb0>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006cc:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <SystemClock_Config+0xb4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d4:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <SystemClock_Config+0xb4>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <SystemClock_Config+0xb4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f0:	2310      	movs	r3, #16
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fa9d 	bl	8000c3c <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000708:	f000 f84a 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fd2c 	bl	8001184 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000732:	f000 f835 	bl	80007a0 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	; 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800075a:	f000 f9f3 	bl	8000b44 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800075e:	2301      	movs	r3, #1
 8000760:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000762:	2300      	movs	r3, #0
 8000764:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800076a:	231f      	movs	r3, #31
 800076c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800076e:	2387      	movs	r3, #135	; 0x87
 8000770:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000772:	2300      	movs	r3, #0
 8000774:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000776:	2300      	movs	r3, #0
 8000778:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800077a:	2301      	movs	r3, #1
 800077c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800077e:	2301      	movs	r3, #1
 8000780:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800078a:	463b      	mov	r3, r7
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fa11 	bl	8000bb4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000792:	2004      	movs	r0, #4
 8000794:	f000 f9ee 	bl	8000b74 <HAL_MPU_Enable>

}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>
	...

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_MspInit+0x44>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <HAL_MspInit+0x44>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_MspInit+0x44>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x44>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x44>)
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d4:	6453      	str	r3, [r2, #68]	; 0x44
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x44>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <NMI_Handler+0x4>

080007fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <HardFault_Handler+0x4>

08000800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <MemManage_Handler+0x4>

08000806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <BusFault_Handler+0x4>

0800080c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <UsageFault_Handler+0x4>

08000812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000840:	f000 f87a 	bl	8000938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <SystemInit+0x20>)
 800084e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000852:	4a05      	ldr	r2, [pc, #20]	; (8000868 <SystemInit+0x20>)
 8000854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800086c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000870:	480d      	ldr	r0, [pc, #52]	; (80008a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000872:	490e      	ldr	r1, [pc, #56]	; (80008ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000874:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000888:	4c0b      	ldr	r4, [pc, #44]	; (80008b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000896:	f7ff ffd7 	bl	8000848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800089a:	f000 fe25 	bl	80014e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800089e:	f7ff fe35 	bl	800050c <main>
  bx  lr    
 80008a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008a4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80008a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008b0:	08001578 	.word	0x08001578
  ldr r2, =_sbss
 80008b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008b8:	2000002c 	.word	0x2000002c

080008bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008bc:	e7fe      	b.n	80008bc <ADC_IRQHandler>

080008be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c2:	2003      	movs	r0, #3
 80008c4:	f000 f90a 	bl	8000adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c8:	200f      	movs	r0, #15
 80008ca:	f000 f805 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ce:	f7ff ff6d 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x54>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x58>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f917 	bl	8000b2a <HAL_SYSTICK_Config>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e00e      	b.n	8000924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d80a      	bhi.n	8000922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090c:	2200      	movs	r2, #0
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000914:	f000 f8ed 	bl	8000af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000918:	4a06      	ldr	r2, [pc, #24]	; (8000934 <HAL_InitTick+0x5c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	e000      	b.n	8000924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000000 	.word	0x20000000
 8000930:	20000008 	.word	0x20000008
 8000934:	20000004 	.word	0x20000004

08000938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_IncTick+0x20>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_IncTick+0x24>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4413      	add	r3, r2
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <HAL_IncTick+0x24>)
 800094a:	6013      	str	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000008 	.word	0x20000008
 800095c:	20000028 	.word	0x20000028

08000960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return uwTick;
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <HAL_GetTick+0x14>)
 8000966:	681b      	ldr	r3, [r3, #0]
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000028 	.word	0x20000028

08000978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <__NVIC_SetPriorityGrouping+0x40>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 80009a2:	4313      	orrs	r3, r2
 80009a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <__NVIC_SetPriorityGrouping+0x40>)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	60d3      	str	r3, [r2, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00
 80009bc:	05fa0000 	.word	0x05fa0000

080009c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <__NVIC_GetPriorityGrouping+0x18>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	f003 0307 	and.w	r3, r3, #7
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db0a      	blt.n	8000a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	490c      	ldr	r1, [pc, #48]	; (8000a28 <__NVIC_SetPriority+0x4c>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	0112      	lsls	r2, r2, #4
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	440b      	add	r3, r1
 8000a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a04:	e00a      	b.n	8000a1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4908      	ldr	r1, [pc, #32]	; (8000a2c <__NVIC_SetPriority+0x50>)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	3b04      	subs	r3, #4
 8000a14:	0112      	lsls	r2, r2, #4
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	440b      	add	r3, r1
 8000a1a:	761a      	strb	r2, [r3, #24]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000e100 	.word	0xe000e100
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f1c3 0307 	rsb	r3, r3, #7
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	bf28      	it	cs
 8000a4e:	2304      	movcs	r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3304      	adds	r3, #4
 8000a56:	2b06      	cmp	r3, #6
 8000a58:	d902      	bls.n	8000a60 <NVIC_EncodePriority+0x30>
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3b03      	subs	r3, #3
 8000a5e:	e000      	b.n	8000a62 <NVIC_EncodePriority+0x32>
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	43d9      	mvns	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	4313      	orrs	r3, r2
         );
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3724      	adds	r7, #36	; 0x24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa8:	d301      	bcc.n	8000aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00f      	b.n	8000ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <SysTick_Config+0x40>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab6:	210f      	movs	r1, #15
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000abc:	f7ff ff8e 	bl	80009dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac8:	2207      	movs	r2, #7
 8000aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	e000e010 	.word	0xe000e010

08000adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ff47 	bl	8000978 <__NVIC_SetPriorityGrouping>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b04:	f7ff ff5c 	bl	80009c0 <__NVIC_GetPriorityGrouping>
 8000b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	6978      	ldr	r0, [r7, #20]
 8000b10:	f7ff ff8e 	bl	8000a30 <NVIC_EncodePriority>
 8000b14:	4602      	mov	r2, r0
 8000b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff5d 	bl	80009dc <__NVIC_SetPriority>
}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ffb0 	bl	8000a98 <SysTick_Config>
 8000b38:	4603      	mov	r3, r0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b48:	f3bf 8f5f 	dmb	sy
}
 8000b4c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <HAL_MPU_Disable+0x28>)
 8000b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b52:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_MPU_Disable+0x28>)
 8000b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b58:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_MPU_Disable+0x2c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00
 8000b70:	e000ed90 	.word	0xe000ed90

08000b74 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000b7c:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <HAL_MPU_Enable+0x38>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_MPU_Enable+0x3c>)
 8000b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8a:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <HAL_MPU_Enable+0x3c>)
 8000b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b90:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000b92:	f3bf 8f4f 	dsb	sy
}
 8000b96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b98:	f3bf 8f6f 	isb	sy
}
 8000b9c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed90 	.word	0xe000ed90
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	785a      	ldrb	r2, [r3, #1]
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <HAL_MPU_ConfigRegion+0x84>)
 8000bc2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d029      	beq.n	8000c20 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000bcc:	4a1a      	ldr	r2, [pc, #104]	; (8000c38 <HAL_MPU_ConfigRegion+0x84>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7b1b      	ldrb	r3, [r3, #12]
 8000bd8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7adb      	ldrb	r3, [r3, #11]
 8000bde:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000be0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	7a9b      	ldrb	r3, [r3, #10]
 8000be6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000be8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	7b5b      	ldrb	r3, [r3, #13]
 8000bee:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000bf0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	7b9b      	ldrb	r3, [r3, #14]
 8000bf6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bf8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	7bdb      	ldrb	r3, [r3, #15]
 8000bfe:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c00:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7a5b      	ldrb	r3, [r3, #9]
 8000c06:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	7a1b      	ldrb	r3, [r3, #8]
 8000c0e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c10:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	7812      	ldrb	r2, [r2, #0]
 8000c16:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c1a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c1c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000c1e:	e005      	b.n	8000c2c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_MPU_ConfigRegion+0x84>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <HAL_MPU_ConfigRegion+0x84>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed90 	.word	0xe000ed90

08000c3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000c44:	2300      	movs	r3, #0
 8000c46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e291      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 8087 	beq.w	8000d6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c60:	4b96      	ldr	r3, [pc, #600]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f003 030c 	and.w	r3, r3, #12
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d00c      	beq.n	8000c86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c6c:	4b93      	ldr	r3, [pc, #588]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f003 030c 	and.w	r3, r3, #12
 8000c74:	2b08      	cmp	r3, #8
 8000c76:	d112      	bne.n	8000c9e <HAL_RCC_OscConfig+0x62>
 8000c78:	4b90      	ldr	r3, [pc, #576]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c84:	d10b      	bne.n	8000c9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c86:	4b8d      	ldr	r3, [pc, #564]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d06c      	beq.n	8000d6c <HAL_RCC_OscConfig+0x130>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d168      	bne.n	8000d6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e26b      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ca6:	d106      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x7a>
 8000ca8:	4b84      	ldr	r3, [pc, #528]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a83      	ldr	r2, [pc, #524]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	e02e      	b.n	8000d14 <HAL_RCC_OscConfig+0xd8>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d10c      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x9c>
 8000cbe:	4b7f      	ldr	r3, [pc, #508]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a7e      	ldr	r2, [pc, #504]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	4b7c      	ldr	r3, [pc, #496]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a7b      	ldr	r2, [pc, #492]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	e01d      	b.n	8000d14 <HAL_RCC_OscConfig+0xd8>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ce0:	d10c      	bne.n	8000cfc <HAL_RCC_OscConfig+0xc0>
 8000ce2:	4b76      	ldr	r3, [pc, #472]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a75      	ldr	r2, [pc, #468]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b73      	ldr	r3, [pc, #460]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a72      	ldr	r2, [pc, #456]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e00b      	b.n	8000d14 <HAL_RCC_OscConfig+0xd8>
 8000cfc:	4b6f      	ldr	r3, [pc, #444]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a6e      	ldr	r2, [pc, #440]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4b6c      	ldr	r3, [pc, #432]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a6b      	ldr	r2, [pc, #428]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fe20 	bl	8000960 <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d24:	f7ff fe1c 	bl	8000960 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b64      	cmp	r3, #100	; 0x64
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e21f      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d36:	4b61      	ldr	r3, [pc, #388]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f0      	beq.n	8000d24 <HAL_RCC_OscConfig+0xe8>
 8000d42:	e014      	b.n	8000d6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d44:	f7ff fe0c 	bl	8000960 <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fe08 	bl	8000960 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b64      	cmp	r3, #100	; 0x64
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e20b      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5e:	4b57      	ldr	r3, [pc, #348]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f0      	bne.n	8000d4c <HAL_RCC_OscConfig+0x110>
 8000d6a:	e000      	b.n	8000d6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d069      	beq.n	8000e4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d7a:	4b50      	ldr	r3, [pc, #320]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00b      	beq.n	8000d9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d86:	4b4d      	ldr	r3, [pc, #308]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f003 030c 	and.w	r3, r3, #12
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	d11c      	bne.n	8000dcc <HAL_RCC_OscConfig+0x190>
 8000d92:	4b4a      	ldr	r3, [pc, #296]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d116      	bne.n	8000dcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9e:	4b47      	ldr	r3, [pc, #284]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <HAL_RCC_OscConfig+0x17a>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d001      	beq.n	8000db6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e1df      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db6:	4b41      	ldr	r3, [pc, #260]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	493d      	ldr	r1, [pc, #244]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dca:	e040      	b.n	8000e4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d023      	beq.n	8000e1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dd4:	4b39      	ldr	r3, [pc, #228]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a38      	ldr	r2, [pc, #224]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000de0:	f7ff fdbe 	bl	8000960 <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000de8:	f7ff fdba 	bl	8000960 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e1bd      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dfa:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0f0      	beq.n	8000de8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e06:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	4929      	ldr	r1, [pc, #164]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]
 8000e1a:	e018      	b.n	8000e4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e1c:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000e22:	f023 0301 	bic.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e28:	f7ff fd9a 	bl	8000960 <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e30:	f7ff fd96 	bl	8000960 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e199      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1f0      	bne.n	8000e30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d038      	beq.n	8000ecc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d019      	beq.n	8000e96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e66:	4a15      	ldr	r2, [pc, #84]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e6e:	f7ff fd77 	bl	8000960 <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e76:	f7ff fd73 	bl	8000960 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e176      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f0      	beq.n	8000e76 <HAL_RCC_OscConfig+0x23a>
 8000e94:	e01a      	b.n	8000ecc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_RCC_OscConfig+0x280>)
 8000e9c:	f023 0301 	bic.w	r3, r3, #1
 8000ea0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fd5d 	bl	8000960 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fd59 	bl	8000960 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d903      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e15c      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>
 8000ebc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec0:	4b91      	ldr	r3, [pc, #580]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1ee      	bne.n	8000eaa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80a4 	beq.w	8001022 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eda:	4b8b      	ldr	r3, [pc, #556]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10d      	bne.n	8000f02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b88      	ldr	r3, [pc, #544]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a87      	ldr	r2, [pc, #540]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b85      	ldr	r3, [pc, #532]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000efe:	2301      	movs	r3, #1
 8000f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f02:	4b82      	ldr	r3, [pc, #520]	; (800110c <HAL_RCC_OscConfig+0x4d0>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d118      	bne.n	8000f40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000f0e:	4b7f      	ldr	r3, [pc, #508]	; (800110c <HAL_RCC_OscConfig+0x4d0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a7e      	ldr	r2, [pc, #504]	; (800110c <HAL_RCC_OscConfig+0x4d0>)
 8000f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f1a:	f7ff fd21 	bl	8000960 <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f22:	f7ff fd1d 	bl	8000960 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b64      	cmp	r3, #100	; 0x64
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e120      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f34:	4b75      	ldr	r3, [pc, #468]	; (800110c <HAL_RCC_OscConfig+0x4d0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f0      	beq.n	8000f22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d106      	bne.n	8000f56 <HAL_RCC_OscConfig+0x31a>
 8000f48:	4b6f      	ldr	r3, [pc, #444]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f4c:	4a6e      	ldr	r2, [pc, #440]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6713      	str	r3, [r2, #112]	; 0x70
 8000f54:	e02d      	b.n	8000fb2 <HAL_RCC_OscConfig+0x376>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10c      	bne.n	8000f78 <HAL_RCC_OscConfig+0x33c>
 8000f5e:	4b6a      	ldr	r3, [pc, #424]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f62:	4a69      	ldr	r2, [pc, #420]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000f64:	f023 0301 	bic.w	r3, r3, #1
 8000f68:	6713      	str	r3, [r2, #112]	; 0x70
 8000f6a:	4b67      	ldr	r3, [pc, #412]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f6e:	4a66      	ldr	r2, [pc, #408]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000f70:	f023 0304 	bic.w	r3, r3, #4
 8000f74:	6713      	str	r3, [r2, #112]	; 0x70
 8000f76:	e01c      	b.n	8000fb2 <HAL_RCC_OscConfig+0x376>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	d10c      	bne.n	8000f9a <HAL_RCC_OscConfig+0x35e>
 8000f80:	4b61      	ldr	r3, [pc, #388]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f84:	4a60      	ldr	r2, [pc, #384]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000f86:	f043 0304 	orr.w	r3, r3, #4
 8000f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f8c:	4b5e      	ldr	r3, [pc, #376]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f90:	4a5d      	ldr	r2, [pc, #372]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6713      	str	r3, [r2, #112]	; 0x70
 8000f98:	e00b      	b.n	8000fb2 <HAL_RCC_OscConfig+0x376>
 8000f9a:	4b5b      	ldr	r3, [pc, #364]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f9e:	4a5a      	ldr	r2, [pc, #360]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8000fa6:	4b58      	ldr	r3, [pc, #352]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000faa:	4a57      	ldr	r2, [pc, #348]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000fac:	f023 0304 	bic.w	r3, r3, #4
 8000fb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d015      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fba:	f7ff fcd1 	bl	8000960 <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc0:	e00a      	b.n	8000fd8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fc2:	f7ff fccd 	bl	8000960 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e0ce      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd8:	4b4b      	ldr	r3, [pc, #300]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8000fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0ee      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x386>
 8000fe4:	e014      	b.n	8001010 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fe6:	f7ff fcbb 	bl	8000960 <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fec:	e00a      	b.n	8001004 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fee:	f7ff fcb7 	bl	8000960 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e0b8      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001004:	4b40      	ldr	r3, [pc, #256]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8001006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1ee      	bne.n	8000fee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d105      	bne.n	8001022 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001016:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	4a3b      	ldr	r2, [pc, #236]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 800101c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001020:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 80a4 	beq.w	8001174 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	2b08      	cmp	r3, #8
 8001036:	d06b      	beq.n	8001110 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d149      	bne.n	80010d4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001040:	4b31      	ldr	r3, [pc, #196]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a30      	ldr	r2, [pc, #192]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8001046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800104a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104c:	f7ff fc88 	bl	8000960 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001054:	f7ff fc84 	bl	8000960 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e087      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69da      	ldr	r2, [r3, #28]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	019b      	lsls	r3, r3, #6
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	085b      	lsrs	r3, r3, #1
 800108a:	3b01      	subs	r3, #1
 800108c:	041b      	lsls	r3, r3, #16
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	061b      	lsls	r3, r3, #24
 8001096:	4313      	orrs	r3, r2
 8001098:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 800109a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800109e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a18      	ldr	r2, [pc, #96]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 80010a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ac:	f7ff fc58 	bl	8000960 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b4:	f7ff fc54 	bl	8000960 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e057      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f0      	beq.n	80010b4 <HAL_RCC_OscConfig+0x478>
 80010d2:	e04f      	b.n	8001174 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 80010da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e0:	f7ff fc3e 	bl	8000960 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e8:	f7ff fc3a 	bl	8000960 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e03d      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010fa:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f0      	bne.n	80010e8 <HAL_RCC_OscConfig+0x4ac>
 8001106:	e035      	b.n	8001174 <HAL_RCC_OscConfig+0x538>
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <HAL_RCC_OscConfig+0x544>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d028      	beq.n	8001170 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001128:	429a      	cmp	r2, r3
 800112a:	d121      	bne.n	8001170 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001136:	429a      	cmp	r2, r3
 8001138:	d11a      	bne.n	8001170 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001140:	4013      	ands	r3, r2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001146:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001148:	4293      	cmp	r3, r2
 800114a:	d111      	bne.n	8001170 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	3b01      	subs	r3, #1
 800115a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800115c:	429a      	cmp	r2, r3
 800115e:	d107      	bne.n	8001170 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800116c:	429a      	cmp	r2, r3
 800116e:	d001      	beq.n	8001174 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800

08001184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e0d0      	b.n	800133e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800119c:	4b6a      	ldr	r3, [pc, #424]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d910      	bls.n	80011cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011aa:	4b67      	ldr	r3, [pc, #412]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 020f 	bic.w	r2, r3, #15
 80011b2:	4965      	ldr	r1, [pc, #404]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ba:	4b63      	ldr	r3, [pc, #396]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d001      	beq.n	80011cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e0b8      	b.n	800133e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d020      	beq.n	800121a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011e4:	4b59      	ldr	r3, [pc, #356]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4a58      	ldr	r2, [pc, #352]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 80011ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011fc:	4b53      	ldr	r3, [pc, #332]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	4a52      	ldr	r2, [pc, #328]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001206:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001208:	4b50      	ldr	r3, [pc, #320]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	494d      	ldr	r1, [pc, #308]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001216:	4313      	orrs	r3, r2
 8001218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d040      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d107      	bne.n	800123e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	4b47      	ldr	r3, [pc, #284]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d115      	bne.n	8001266 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e07f      	b.n	800133e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d107      	bne.n	8001256 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001246:	4b41      	ldr	r3, [pc, #260]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d109      	bne.n	8001266 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e073      	b.n	800133e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e06b      	b.n	800133e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001266:	4b39      	ldr	r3, [pc, #228]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f023 0203 	bic.w	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4936      	ldr	r1, [pc, #216]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001274:	4313      	orrs	r3, r2
 8001276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001278:	f7ff fb72 	bl	8000960 <HAL_GetTick>
 800127c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127e:	e00a      	b.n	8001296 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001280:	f7ff fb6e 	bl	8000960 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	f241 3288 	movw	r2, #5000	; 0x1388
 800128e:	4293      	cmp	r3, r2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e053      	b.n	800133e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 020c 	and.w	r2, r3, #12
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d1eb      	bne.n	8001280 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d210      	bcs.n	80012d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 020f 	bic.w	r2, r3, #15
 80012be:	4922      	ldr	r1, [pc, #136]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e032      	b.n	800133e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	4916      	ldr	r1, [pc, #88]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d009      	beq.n	8001316 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	490e      	ldr	r1, [pc, #56]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001312:	4313      	orrs	r3, r2
 8001314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001316:	f000 f821 	bl	800135c <HAL_RCC_GetSysClockFreq>
 800131a:	4602      	mov	r2, r0
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	490a      	ldr	r1, [pc, #40]	; (8001350 <HAL_RCC_ClockConfig+0x1cc>)
 8001328:	5ccb      	ldrb	r3, [r1, r3]
 800132a:	fa22 f303 	lsr.w	r3, r2, r3
 800132e:	4a09      	ldr	r2, [pc, #36]	; (8001354 <HAL_RCC_ClockConfig+0x1d0>)
 8001330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_RCC_ClockConfig+0x1d4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff face 	bl	80008d8 <HAL_InitTick>

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023c00 	.word	0x40023c00
 800134c:	40023800 	.word	0x40023800
 8001350:	08001558 	.word	0x08001558
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004

0800135c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800135c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001360:	b090      	sub	sp, #64	; 0x40
 8001362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
 8001368:	2300      	movs	r3, #0
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800136c:	2300      	movs	r3, #0
 800136e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001374:	4b59      	ldr	r3, [pc, #356]	; (80014dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	2b08      	cmp	r3, #8
 800137e:	d00d      	beq.n	800139c <HAL_RCC_GetSysClockFreq+0x40>
 8001380:	2b08      	cmp	r3, #8
 8001382:	f200 80a1 	bhi.w	80014c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <HAL_RCC_GetSysClockFreq+0x34>
 800138a:	2b04      	cmp	r3, #4
 800138c:	d003      	beq.n	8001396 <HAL_RCC_GetSysClockFreq+0x3a>
 800138e:	e09b      	b.n	80014c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001390:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001392:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001394:	e09b      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001396:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001398:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800139a:	e098      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800139c:	4b4f      	ldr	r3, [pc, #316]	; (80014dc <HAL_RCC_GetSysClockFreq+0x180>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80013a6:	4b4d      	ldr	r3, [pc, #308]	; (80014dc <HAL_RCC_GetSysClockFreq+0x180>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d028      	beq.n	8001404 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b2:	4b4a      	ldr	r3, [pc, #296]	; (80014dc <HAL_RCC_GetSysClockFreq+0x180>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	099b      	lsrs	r3, r3, #6
 80013b8:	2200      	movs	r2, #0
 80013ba:	623b      	str	r3, [r7, #32]
 80013bc:	627a      	str	r2, [r7, #36]	; 0x24
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80013c4:	2100      	movs	r1, #0
 80013c6:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80013c8:	fb03 f201 	mul.w	r2, r3, r1
 80013cc:	2300      	movs	r3, #0
 80013ce:	fb00 f303 	mul.w	r3, r0, r3
 80013d2:	4413      	add	r3, r2
 80013d4:	4a43      	ldr	r2, [pc, #268]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80013d6:	fba0 1202 	umull	r1, r2, r0, r2
 80013da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013dc:	460a      	mov	r2, r1
 80013de:	62ba      	str	r2, [r7, #40]	; 0x28
 80013e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013e2:	4413      	add	r3, r2
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e8:	2200      	movs	r2, #0
 80013ea:	61bb      	str	r3, [r7, #24]
 80013ec:	61fa      	str	r2, [r7, #28]
 80013ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013f6:	f7fe ff07 	bl	8000208 <__aeabi_uldivmod>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4613      	mov	r3, r2
 8001400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001402:	e053      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	099b      	lsrs	r3, r3, #6
 800140a:	2200      	movs	r2, #0
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	617a      	str	r2, [r7, #20]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001416:	f04f 0b00 	mov.w	fp, #0
 800141a:	4652      	mov	r2, sl
 800141c:	465b      	mov	r3, fp
 800141e:	f04f 0000 	mov.w	r0, #0
 8001422:	f04f 0100 	mov.w	r1, #0
 8001426:	0159      	lsls	r1, r3, #5
 8001428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800142c:	0150      	lsls	r0, r2, #5
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	ebb2 080a 	subs.w	r8, r2, sl
 8001436:	eb63 090b 	sbc.w	r9, r3, fp
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001446:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800144a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800144e:	ebb2 0408 	subs.w	r4, r2, r8
 8001452:	eb63 0509 	sbc.w	r5, r3, r9
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	00eb      	lsls	r3, r5, #3
 8001460:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001464:	00e2      	lsls	r2, r4, #3
 8001466:	4614      	mov	r4, r2
 8001468:	461d      	mov	r5, r3
 800146a:	eb14 030a 	adds.w	r3, r4, sl
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	eb45 030b 	adc.w	r3, r5, fp
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001482:	4629      	mov	r1, r5
 8001484:	028b      	lsls	r3, r1, #10
 8001486:	4621      	mov	r1, r4
 8001488:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800148c:	4621      	mov	r1, r4
 800148e:	028a      	lsls	r2, r1, #10
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001496:	2200      	movs	r2, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	60fa      	str	r2, [r7, #12]
 800149c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014a0:	f7fe feb2 	bl	8000208 <__aeabi_uldivmod>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4613      	mov	r3, r2
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_RCC_GetSysClockFreq+0x180>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	0c1b      	lsrs	r3, r3, #16
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	3301      	adds	r3, #1
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80014bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80014c6:	e002      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80014ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80014cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3740      	adds	r7, #64	; 0x40
 80014d4:	46bd      	mov	sp, r7
 80014d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	00f42400 	.word	0x00f42400
 80014e4:	017d7840 	.word	0x017d7840

080014e8 <__libc_init_array>:
 80014e8:	b570      	push	{r4, r5, r6, lr}
 80014ea:	4d0d      	ldr	r5, [pc, #52]	; (8001520 <__libc_init_array+0x38>)
 80014ec:	4c0d      	ldr	r4, [pc, #52]	; (8001524 <__libc_init_array+0x3c>)
 80014ee:	1b64      	subs	r4, r4, r5
 80014f0:	10a4      	asrs	r4, r4, #2
 80014f2:	2600      	movs	r6, #0
 80014f4:	42a6      	cmp	r6, r4
 80014f6:	d109      	bne.n	800150c <__libc_init_array+0x24>
 80014f8:	4d0b      	ldr	r5, [pc, #44]	; (8001528 <__libc_init_array+0x40>)
 80014fa:	4c0c      	ldr	r4, [pc, #48]	; (800152c <__libc_init_array+0x44>)
 80014fc:	f000 f820 	bl	8001540 <_init>
 8001500:	1b64      	subs	r4, r4, r5
 8001502:	10a4      	asrs	r4, r4, #2
 8001504:	2600      	movs	r6, #0
 8001506:	42a6      	cmp	r6, r4
 8001508:	d105      	bne.n	8001516 <__libc_init_array+0x2e>
 800150a:	bd70      	pop	{r4, r5, r6, pc}
 800150c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001510:	4798      	blx	r3
 8001512:	3601      	adds	r6, #1
 8001514:	e7ee      	b.n	80014f4 <__libc_init_array+0xc>
 8001516:	f855 3b04 	ldr.w	r3, [r5], #4
 800151a:	4798      	blx	r3
 800151c:	3601      	adds	r6, #1
 800151e:	e7f2      	b.n	8001506 <__libc_init_array+0x1e>
 8001520:	08001570 	.word	0x08001570
 8001524:	08001570 	.word	0x08001570
 8001528:	08001570 	.word	0x08001570
 800152c:	08001574 	.word	0x08001574

08001530 <memset>:
 8001530:	4402      	add	r2, r0
 8001532:	4603      	mov	r3, r0
 8001534:	4293      	cmp	r3, r2
 8001536:	d100      	bne.n	800153a <memset+0xa>
 8001538:	4770      	bx	lr
 800153a:	f803 1b01 	strb.w	r1, [r3], #1
 800153e:	e7f9      	b.n	8001534 <memset+0x4>

08001540 <_init>:
 8001540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001542:	bf00      	nop
 8001544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001546:	bc08      	pop	{r3}
 8001548:	469e      	mov	lr, r3
 800154a:	4770      	bx	lr

0800154c <_fini>:
 800154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154e:	bf00      	nop
 8001550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001552:	bc08      	pop	{r3}
 8001554:	469e      	mov	lr, r3
 8001556:	4770      	bx	lr
